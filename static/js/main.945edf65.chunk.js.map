{"version":3,"sources":["Components/Search.jsx","Components/TableHeader.jsx","Components/TableBody.jsx","Components/DataTable.jsx","Components/prepareData.js","Components/Pagination.jsx","App.jsx","index.jsx"],"names":["Search","search","handleSearch","className","src","alt","type","value","onChange","placeholder","title","TableHeader","sortByName","sortByViews","handleSort","name","checked","onClick","TableBody","persons","map","person","index","nameNormalized","toLocaleLowerCase","searchNormalized","includes","style","backgroundColor","avatarColor","count_pub","award","pageviews","id","DataTable","setSort","useState","setSortByName","setSortByViews","event","target","topAwards","winners","data","sort","a","b","slice","getRandomColor","color","Math","floor","random","toString","length","preparedData","ind","Object","prototype","hasOwnProperty","call","Pagination","personPerPage","totalPersons","currentPage","paginate","pageNumbers","lastPage","ceil","i","start","end","push","App","authorsData","sortedField","setSortedField","setSearch","setCurrentPage","indexOfLastPerson","indexOfFirstPerson","currentPersons","newData","localeCompare","pageNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.945edf65.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search.scss';\n\nexport const Search = ({ search, handleSearch }) => (\n  <div className=\"search\">\n    <img\n      className=\"search__icon\"\n      src=\"./images/search.png\"\n      alt=\"search\"\n    />\n    <input\n      className=\"search__field\"\n      type=\"text\"\n      value={search}\n      onChange={handleSearch}\n      placeholder=\"Поиск авторов по имени\"\n      title=\"Используйте только русские буквы\"\n    />\n  </div>\n\n);\n\nSearch.propTypes = {\n  search: PropTypes.string.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TableHeader = ({ sortByName, sortByViews, handleSort }) => (\n  <thead>\n    <tr>\n      <th />\n      <th />\n      <th>\n        <input\n          type=\"checkbox\"\n          name=\"name\"\n          checked={sortByName}\n          onChange={handleSort}\n        />\n        <button\n          type=\"button\"\n          name=\"name\"\n          onClick={handleSort}\n        >\n          sort\n        </button>\n      </th>\n      <th />\n      <th>\n        <input\n          type=\"checkbox\"\n          name=\"pageviews\"\n          checked={sortByViews}\n          onChange={handleSort}\n        />\n        <button\n          type=\"button\"\n          name=\"pageviews\"\n          onClick={handleSort}\n        >\n          sort\n        </button>\n      </th>\n    </tr>\n  </thead>\n);\n\nTableHeader.propTypes = {\n  sortByName: PropTypes.bool.isRequired,\n  sortByViews: PropTypes.bool.isRequired,\n  handleSort: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TableBody = ({ persons, search }) => (\n  <tbody>\n    {persons.map((person, index) => {\n      const nameNormalized = person.name.toLocaleLowerCase();\n      const searchNormalized = search.toLocaleLowerCase();\n      const visible = nameNormalized.includes(searchNormalized);\n\n      // conditional rendering to show only searchable persons\n      return (visible && (\n        <tr key={person.id}>\n          <td>{index + 1}</td>\n          <td>\n            <span style={{ backgroundColor: person.avatarColor }}>\n              {person.name[0]}\n            </span>\n          </td>\n          <td>\n            <span>\n              {person.name}\n            </span>\n            <br />\n            {`${person.count_pub} публ.`}\n          </td>\n          <td>\n            {person.award\n              ? <img src={person.award} alt=\"in top\" />\n              : null}\n          </td>\n          <td>{person.pageviews}</td>\n        </tr>\n      ));\n    })}\n  </tbody>\n);\n\nTableBody.propTypes = {\n  persons: PropTypes.arrayOf(PropTypes.shape({}).isRequired).isRequired,\n  search: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableHeader } from './TableHeader';\nimport { TableBody } from './TableBody';\nimport './dataTable.scss';\n\nexport const DataTable = ({ persons, search, setSort }) => {\n  const [sortByName, setSortByName] = useState(false);\n  const [sortByViews, setSortByViews] = useState(false);\n\n  // hanle sort and checkbox for active sort option\n  const handleSort = (event) => {\n    if (event.target.name === 'name') {\n      setSort('name');\n      setSortByViews(false);\n      setSortByName(true);\n    } else {\n      setSort('pageviews');\n      setSortByViews(true);\n      setSortByName(false);\n    }\n  };\n\n  return (\n    <table className=\"rate__table\">\n      <TableHeader\n        sortByName={sortByName}\n        sortByViews={sortByViews}\n        handleSort={handleSort}\n      />\n\n      <TableBody\n        persons={persons}\n        search={search}\n      />\n    </table>\n  );\n};\n\nDataTable.propTypes = {\n  persons: PropTypes.arrayOf(PropTypes.shape({}).isRequired).isRequired,\n  search: PropTypes.string.isRequired,\n  setSort: PropTypes.func.isRequired,\n};\n","import data from '../data.json';\n\n// make an object {name: prize icon url}\n// with top 3 persons according to their pageviews\nexport const topAwards = (() => {\n  const sorted = [...data].sort((a, b) => b.pageviews - a.pageviews);\n  const winners = sorted.slice(0, 3);\n  const gold = './images/1st.svg';\n  const silver = './images/2nd.svg';\n  const bronze = './images/3rd.svg';\n\n  return {\n    [winners[0].name]: gold,\n    [winners[1].name]: silver,\n    [winners[2].name]: bronze,\n  };\n})();\n\n// generate background color to person avatar\nconst getRandomColor = () => {\n  const color = Math.floor(Math.random() * 16777216).toString(16);\n\n  return '#000000'.slice(0, -color.length) + color;\n};\n\n// preparing data from JSON and marks the top 3 persons\nexport const preparedData = data.map((person, ind) => {\n  const id = ind + 1;\n\n  if (Object.prototype.hasOwnProperty.call(topAwards, person.name)) {\n    return ({\n      ...person,\n      id,\n      award: topAwards[person.name],\n      avatarColor: getRandomColor(),\n    });\n  }\n\n  return ({\n    ...person,\n    id,\n    award: null,\n    avatarColor: getRandomColor(),\n  });\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './pagination.scss';\n\nexport const Pagination = (\n  { personPerPage,\n    totalPersons,\n    currentPage,\n    paginate },\n) => {\n  const pageNumbers = [];\n  const lastPage = Math.ceil(totalPersons / personPerPage);\n\n  // make page numbers\n  for (let i = 1; i <= lastPage; i += 1) {\n    const start = (i === 1) ? i : (i - 1) * personPerPage;\n    let end = 10;\n\n    if (i > 1) {\n      end = (i === lastPage)\n        ? totalPersons\n        : i * personPerPage;\n    }\n\n    pageNumbers.push(`${start} - ${end}`);\n  }\n\n  return (\n    <div className=\"pagination\">\n      {(currentPage !== 1) && (\n        <button\n          className=\"pagination__button pagination__button_left\"\n          onClick={() => paginate(currentPage - 1)}\n          type=\"button\"\n        >\n          &#60;\n        </button>\n      )}\n\n      <span className=\"pagination__page\">\n        {pageNumbers[currentPage - 1]}\n      </span>\n\n      {(currentPage !== lastPage) && (\n        <button\n          className=\"pagination__button pagination__button_right\"\n          onClick={() => paginate(currentPage + 1)}\n          type=\"button\"\n        >\n          &#62;\n        </button>\n      )}\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  personPerPage: PropTypes.number.isRequired,\n  totalPersons: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  paginate: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Search } from './Components/Search';\nimport { DataTable } from './Components/DataTable';\nimport { preparedData } from './Components/prepareData';\nimport { Pagination } from './Components/Pagination';\nimport './App.scss';\n\nexport const App = () => {\n  const [authorsData] = useState(preparedData);\n  const [sortedField, setSortedField] = useState(null);\n  const [search, setSearch] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [personPerPage] = useState(10);\n\n  // sorting person data according to chosen column\n  const sortData = (() => {\n    const newData = [...authorsData];\n\n    switch (sortedField) {\n      case 'name':\n        newData.sort((a, b) => a.name.localeCompare(b.name));\n        break;\n      case 'pageviews':\n        newData.sort((a, b) => b.pageviews - a.pageviews);\n        break;\n      default:\n        break;\n    }\n\n    return newData;\n  })();\n\n  // get current persons for pagination\n  const indexOfLastPerson = currentPage * personPerPage;\n  const indexOfFirstPerson = indexOfLastPerson - personPerPage;\n  const currentPersons = sortData\n    .slice(indexOfFirstPerson, indexOfLastPerson);\n\n  // controlled input (search bar)\n  const handleSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  // change page\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <Search\n        search={search}\n        handleSearch={handleSearch}\n      />\n      <DataTable\n        persons={currentPersons}\n        search={search}\n        setSort={setSortedField}\n      />\n\n      <Pagination\n        personPerPage={personPerPage}\n        totalPersons={authorsData.length}\n        currentPage={currentPage}\n        paginate={paginate}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}